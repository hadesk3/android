// Generated by view binder compiler. Do not edit!
package com.example.ck_room.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ck_room.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ScheduleBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button back;

  @NonNull
  public final Button chooseSeat;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RecyclerView recyclerView2;

  @NonNull
  public final TextView textView28;

  @NonNull
  public final TextView textView30;

  @NonNull
  public final TextView textView32;

  @NonNull
  public final TextView textView33;

  private ScheduleBinding(@NonNull LinearLayout rootView, @NonNull Button back,
      @NonNull Button chooseSeat, @NonNull RecyclerView recyclerView,
      @NonNull RecyclerView recyclerView2, @NonNull TextView textView28,
      @NonNull TextView textView30, @NonNull TextView textView32, @NonNull TextView textView33) {
    this.rootView = rootView;
    this.back = back;
    this.chooseSeat = chooseSeat;
    this.recyclerView = recyclerView;
    this.recyclerView2 = recyclerView2;
    this.textView28 = textView28;
    this.textView30 = textView30;
    this.textView32 = textView32;
    this.textView33 = textView33;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ScheduleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ScheduleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.schedule, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ScheduleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back;
      Button back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.choose_seat;
      Button chooseSeat = ViewBindings.findChildViewById(rootView, id);
      if (chooseSeat == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.recyclerView2;
      RecyclerView recyclerView2 = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView2 == null) {
        break missingId;
      }

      id = R.id.textView28;
      TextView textView28 = ViewBindings.findChildViewById(rootView, id);
      if (textView28 == null) {
        break missingId;
      }

      id = R.id.textView30;
      TextView textView30 = ViewBindings.findChildViewById(rootView, id);
      if (textView30 == null) {
        break missingId;
      }

      id = R.id.textView32;
      TextView textView32 = ViewBindings.findChildViewById(rootView, id);
      if (textView32 == null) {
        break missingId;
      }

      id = R.id.textView33;
      TextView textView33 = ViewBindings.findChildViewById(rootView, id);
      if (textView33 == null) {
        break missingId;
      }

      return new ScheduleBinding((LinearLayout) rootView, back, chooseSeat, recyclerView,
          recyclerView2, textView28, textView30, textView32, textView33);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
